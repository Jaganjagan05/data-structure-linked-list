Given a singly linked list. The task is to swap elements in the linked list pairwise. For example, if the input list is 1 2 3 4, the resulting list after swaps will be 2 1 4 3.

Note: You need to swap the nodes, not only the data. If only data is swapped then the driver code will print -1.

Examples:

Input: LinkedList: 1->2->2->4->5->6->7->8
Output: 2->1->4->2->6->5->8->7

Explanation: After swapping each pair considering (1,2), (2, 4), (5, 6).. so on as pairs, we get 2, 1, 4, 2, 6, 5, 8, 7 as a new linked list.
Input: LinkedList: 1->3->4->7->9->10->1
Output: 3->1->7->4->10->9->1

Explanation: After swapping each pair considering (1,3), (4, 7), (9, 10).. so on as pairs, we get 3, 1, 7, 4, 10, 9, 1 as a new linked list.
Constraints:
1 ≤ size of linked list ≤ 106
1 ≤ elements of linked list ≤ 106


/* node class of the linked list

class Node
{
    int data;
    Node next;
    Node(int key)
    {
        data = key;
        next = null;
    }
}

*/

class Solution {
    // Function to pairwise swap elements of a linked list.
    // It should return the head of the modified list.
    public Node pairwiseSwap(Node head) {
        if (head == null || head.next == null) return head; // No swap needed for empty or single-node lists
        
        // Initialize a dummy node to handle edge cases
        Node dummy = new Node(-1);
        dummy.next = head;
        Node prev = dummy;

        while (prev.next != null && prev.next.next != null) {
            // Nodes to be swapped
            Node first = prev.next;
            Node second = prev.next.next;

            // Swap the nodes
            first.next = second.next;
            second.next = first;
            prev.next = second;

            // Move to the next pair
            prev = first;
        }

        return dummy.next;
    }
}
