Given a singly linked list, remove all nodes that have a node with a greater value anywhere to their right in the list. Return the head of the modified linked list.

Examples:

Input:
LinkedList = 12->15->10->11->5->6->2->3
Output: 15->11->6->3

Explanation: Since, 12, 10, 5 and 2 are the elements which have greater elements on the following nodes. So, after deleting them, the linked list would like be 15, 11, 6, 3.
Input:
LinkedList = 10->20->30->40->50->60
Output: 60

Explanation: All the nodes except the last node has a greater value node on its right, so all the nodes except the last node must be removed.
Constraints:
1 ≤ size of linked list ≤ 106
1 ≤ element of linked list ≤ 106



/*
class Node {
   int data;
   Node next;

  Node(int data) {
      this.data = data;
  }
}
*/
class Solution {
    Node compute(Node head) {
        // Step 1: Reverse the linked list
        Node rev = reverse(head);

        // Step 2: Remove nodes with greater value on the left (originally "right")
        Node temp = rev;
        while (temp != null && temp.next != null) {
            if (temp.data > temp.next.data) {
                temp.next = temp.next.next; // Skip the next node
            } else {
                temp = temp.next; // Move to the next node
            }
        
        }

        // Step 3: Reverse the list back to original order
        head = reverse(rev);
        return head;
    }

    // Helper function to reverse the linked list
    private static Node reverse(Node head) {
        Node prev = null;
        Node current = head;
        while (current != null) {
            Node next = current.next; // Store next node
            current.next = prev;      // Reverse the link
            prev = current;           // Move prev to current
            current = next;           // Move to the next node
        }
        return prev; // New head of the reversed list
    }
}
