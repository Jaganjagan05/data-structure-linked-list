Given a singly linked list: A0→A1→...→An-2→An-1, reorder it to A0→An-1→A1→An-2→A2→An-3→...
For example: Given 1->2->3->4->5 its reorder is 1->5->2->4->3.

Examples:

Input: LinkedList: 1->2->3
Output: 1->3->2
Explanation: Here n=3, so the correct order is A0→A2→A1

Input: LinkedList: 1->7->3->4
Output: 1->4->7->3
Explanation: Here n=4, so the correct order is A0→A3→A1→A2
Note: Try to solve without using any auxiliary space.

Constraints:
1 <= no. of nodes <= 106
0 <= node->data <= 106

/* Following is the Linked list node structure */

/*class Node
{
    int data;
    Node next;
    Node(int d) {
        data = d;
        next = null;
    }
}*/

class Solution {
    void reorderlist(Node head) {
        if (head == null || head.next == null) {
            return;
        }

        // Find the middle of the list
        Node slow = head;
        Node fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Reverse the second half of the list
        Node newHead = slow.next;
        slow.next = null;
        Node reversed = rev(newHead);

        // Merge the two halves
        Node first = head;
        Node second = reversed;
        while (first != null && second != null) {
            Node temp1 = first.next;
            Node temp2 = second.next;

            first.next = second;
            second.next = temp1;

            first = temp1;
            second = temp2;
        }
    }

    private Node rev(Node head) {
        Node prev = null;
        Node current = head;
        while (current != null) {
            Node next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
}
