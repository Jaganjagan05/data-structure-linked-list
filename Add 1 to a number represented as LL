You are given a linked list where each element in the list is a node and have an integer data. You need to add 1 to the number formed by concatinating all the list node numbers together and return the head of the modified linked list. 

Note: The head represents the first element of the given array.

Examples :

Input: LinkedList: 4->5->6
Output: 457

Explanation: 4->5->6 represents 456 and when 1 is added it becomes 457. 
Input: LinkedList: 1->2->3
Output: 124
 
Explanation:  1->2->3 represents 123 and when 1 is added it becomes 124. 
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= len(list) <= 105
0 <= list[i] <= 9


/*
class Node{
    int data;
    Node next;

    Node(int x){
        data = x;
        next = null;
    }
}
*/

class Solution {
    public Node addOne(Node head) {
        int carry = addWithCarry(head); // Call the helper function to add one
        if (carry == 1) {
            // If there's a carry left, add a new node at the front
            Node newNode = new Node(1);
            newNode.next = head;
            return newNode;
        }
        return head;
    }

    private int addWithCarry(Node head) {
        if (head == null) return 1; // Base case: If null, return carry as 1

        int carry = addWithCarry(head.next); // Recursively add to the next node
        int sum = head.data + carry; // Add carry to the current node's data
        head.data = sum % 10; // Update current node's data
        return sum / 10; // Return carry for the next calculation
    }
}
